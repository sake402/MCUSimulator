@using LivingThing.Core.Frameworks.Client.Components.SVG.FluentBuilder
@using LivingThing.Core.Frameworks.Common.String
@inherits BaseComponent

<Themable Context="theme">
    @{
        ISVGBuilder? svg = null;
        const int chartHeight = 50;
        int w = 300;
        int h = chartHeight;
        var parallelPatterns = Model.ParallelPatterns;
        if (parallelPatterns != null)
        {
            var bits = parallelPatterns.Select(pattern => pattern.Patterns.Select(p => p.IsT1 ? p.AsT1.BinaryBits : 2).Sum()).Max();
            w = bits * 10;
            if (w < 300)
                w = 300;
            h = chartHeight * parallelPatterns.Count();
            svg = SVGBuilder.Create(w, h, DimensionUnit.None, proportionalDimensions: true, xOrigin: XOrigin.Left, yOrigin: YOrigin.Bottom)
            .Attribute("style", $"height:{h}px;width:{w}px");
            double xStep = 1.0 / bits;
            svg.BoxStepY(0, 1, parallelPatterns.Count(), (svg, parallelPatternIndex) =>
            {
                var patterns = parallelPatterns.ElementAt(parallelPatternIndex);
                double yOffset = 0.05;
                double yHeight = 1 - 0.05;
                string color = "#00AEFF";
                string currentColor = "#FCAC00";
                color = theme.Data.ChartColors?.ElementAtOrDefault(parallelPatternIndex) ?? color;
                svg.StrokeColor(color);
                int last = Model.Parameter.InitialState?.ElementAtOrDefault(parallelPatternIndex) == '1' ? 1 : 0;
                double x = 0;
                double y = yOffset;
                if (last == 1)
                {
                    svg.MoveTo(0, y = yHeight);
                }
                else
                {
                    svg.MoveTo(0, yOffset);
                }
                int patternIndex = 0;
                foreach (var pattern in patterns.Patterns)
                {
                    if (pattern.IsT0)//delay
                    {
                        svg.MoveTo(x, yHeight).Rectangle(xStep * 2, yHeight);
                        if (patterns.PatternIndex == patternIndex && patterns.Waiting == true)
                        {
                            svg.StrokeColor(currentColor).FillColor(currentColor + "40");
                        }
                        else
                        {
                            svg.StrokeColor(color).FillColor(color + "40");
                        }
                        x += xStep * 2;
                        svg.MoveTo(x, y);
                    }
                    else
                    {
                        for (int bitIndex = 0; bitIndex < pattern.AsT1.BinaryBits; bitIndex++)
                        {
                            var ibit = pattern.AsT1.GetBitCode(bitIndex) ? 1 : 0;
                            if (last == 0 && ibit == 0)
                            {
                                svg.LineTo(x = x + xStep, y = yOffset);
                                if (patterns.PatternIndex == patternIndex && patterns.BitIndex == bitIndex)
                                {
                                    svg.StrokeColor(currentColor);
                                }
                                else
                                {
                                    svg.StrokeColor(color);
                                }
                            }
                            else if (last == 0 && ibit != 0)
                            {
                                svg.LineTo(x, y = yHeight);
                                if (patterns.PatternIndex == patternIndex && patterns.BitIndex == bitIndex)
                                {
                                    svg.StrokeColor(currentColor);
                                }
                                else
                                {
                                    svg.StrokeColor(color);
                                }
                                svg.LineTo(x = x + xStep, y = yHeight);
                                if (patterns.PatternIndex == patternIndex && patterns.BitIndex == bitIndex)
                                {
                                    svg.StrokeColor(currentColor);
                                }
                                else
                                {
                                    svg.StrokeColor(color);
                                }
                            }
                            else if (last != 0 && ibit == 0)
                            {
                                svg.LineTo(x, y = yOffset);
                                if (patterns.PatternIndex == patternIndex && patterns.BitIndex == bitIndex)
                                {
                                    svg.StrokeColor(currentColor);
                                }
                                else
                                {
                                    svg.StrokeColor(color);
                                }
                                svg.LineTo(x = x + xStep, y = yOffset);
                                if (patterns.PatternIndex == patternIndex && patterns.BitIndex == bitIndex)
                                {
                                    svg.StrokeColor(currentColor);
                                }
                                else
                                {
                                    svg.StrokeColor(color);
                                }
                            }
                            else
                            {
                                svg.LineTo(x = x + xStep, y = yHeight);
                                if (patterns.PatternIndex == patternIndex && patterns.BitIndex == bitIndex)
                                {
                                    svg.StrokeColor(currentColor);
                                }
                                else
                                {
                                    svg.StrokeColor(color);
                                }
                            }
                            last = ibit;
                        }
                    }
                    patternIndex++;
                }
            });
            // double yOffset = (chartHeight+chartMargin) * parallelPatternIndex;
            // string color = "#00AEFF";
            // string currentColor = "#FCAC00";
            // color = theme.Data.ChartColors?.ElementAtOrDefault(parallelPatternIndex) ?? color;
            // svg.StrokeColor(color);
            // int last = Model.Parameter.InitialState?.ElementAtOrDefault(parallelPatternIndex) == '1' ? 1 : 0;
            // double x = 0;
            // double y = 0;
            // if (last == 1)
            // {
            //     svg.MoveTo(0, y = 0.99);
            // }
            // else
            // {
            //     svg.MoveTo(0, 0.01);
            // }
            // int patternIndex = 0;
            // foreach (var pattern in patterns)
            // {
            //     if (pattern.IsT0)//delay
            //     {
            //         svg.MoveTo(x, 0.99).Rectangle(xStep * 2, 0.99);
            //         if (Model.ParallelPatternContexts?[parallelPatternIndex].PatternIndex == patternIndex &&
            //         Model.ParallelPatternContexts?[parallelPatternIndex].Waiting == true)
            //         {
            //             svg.StrokeColor(currentColor).FillColor(currentColor + "40");
            //         }
            //         else
            //         {
            //             svg.StrokeColor(color).FillColor(color + "40");
            //         }
            //         x += xStep * 2;
            //         svg.MoveTo(x, y);
            //     }
            //     else
            //     {
            //         for (int bitIndex = 0; bitIndex < pattern.AsT1.BinaryBits; bitIndex++)
            //         {
            //             var ibit = pattern.AsT1.GetBitCode(bitIndex) ? 1 : 0;
            //             if (last == 0 && ibit == 0)
            //             {
            //                 svg.LineTo(x = x + xStep, y = 0.01);
            //                 if (Model.ParallelPatternContexts?[parallelPatternIndex].PatternIndex == patternIndex &&
            //                 Model.ParallelPatternContexts?[parallelPatternIndex].BitIndex == bitIndex)
            //                 {
            //                     svg.StrokeColor(currentColor);
            //                 }
            //                 else
            //                 {
            //                     svg.StrokeColor(color);
            //                 }
            //             }
            //             else if (last == 0 && ibit != 0)
            //             {
            //                 svg.LineTo(x, y = 0.99);
            //                 if (Model.ParallelPatternContexts?[parallelPatternIndex].PatternIndex == patternIndex &&
            //                 Model.ParallelPatternContexts?[parallelPatternIndex].BitIndex == bitIndex)
            //                 {
            //                     svg.StrokeColor(currentColor);
            //                 }
            //                 else
            //                 {
            //                     svg.StrokeColor(color);
            //                 }
            //                 svg.LineTo(x = x + xStep, y = 0.99);
            //                 if (Model.ParallelPatternContexts?[parallelPatternIndex].PatternIndex == patternIndex &&
            //                 Model.ParallelPatternContexts?[parallelPatternIndex].BitIndex == bitIndex)
            //                 {
            //                     svg.StrokeColor(currentColor);
            //                 }
            //                 else
            //                 {
            //                     svg.StrokeColor(color);
            //                 }
            //             }
            //             else if (last != 0 && ibit == 0)
            //             {
            //                 svg.LineTo(x, y = 0.01);
            //                 if (Model.ParallelPatternContexts?[parallelPatternIndex].PatternIndex == patternIndex &&
            //                 Model.ParallelPatternContexts?[parallelPatternIndex].BitIndex == bitIndex)
            //                 {
            //                     svg.StrokeColor(currentColor);
            //                 }
            //                 else
            //                 {
            //                     svg.StrokeColor(color);
            //                 }
            //                 svg.LineTo(x = x + xStep, y = 0.01);
            //                 if (Model.ParallelPatternContexts?[parallelPatternIndex].PatternIndex == patternIndex &&
            //                 Model.ParallelPatternContexts?[parallelPatternIndex].BitIndex == bitIndex)
            //                 {
            //                     svg.StrokeColor(currentColor);
            //                 }
            //                 else
            //                 {
            //                     svg.StrokeColor(color);
            //                 }
            //             }
            //             else
            //             {
            //                 svg.LineTo(x = x + xStep, y = 0.99);
            //                 if (Model.ParallelPatternContexts?[parallelPatternIndex].PatternIndex == patternIndex &&
            //                 Model.ParallelPatternContexts?[parallelPatternIndex].BitIndex == bitIndex)
            //                 {
            //                     svg.StrokeColor(currentColor);
            //                 }
            //                 else
            //                 {
            //                     svg.StrokeColor(color);
            //                 }
            //             }
            //             last = ibit;
            //         }
            //     }
            //     patternIndex++;
            // }
            // parallelPatternIndex++;
        }
    }

    <div class="pos-rel">
        <button class="pos-abs t-0 r-0 bg-transparent mdi mdi-cog"
                title="Pattern Generator"
                @onclick="GeneratePattern"></button>
        <div class="scroll-x">
            @(svg?.Build())
        </div>
    </div>
</Themable>
